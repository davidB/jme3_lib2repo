buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath 'de.undercouch:gradle-download-task:1.0'
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:0.5'
    }
}

apply plugin: 'download-task'

def jmeRev = "2014-06-12"
// version could be extracted from build/jme/source/com/jme3/system/JmeVersion.java
def jmeVersion = "3.0.10"
//def jmeLibsDirLocal = "${userHome}/.jmonkeyplatform/3.0/libs"
def jmeDir = "${buildDir}/jme"
def jmeLibsDir = "$jmeDir/lib"
def jmeZipFile = file("${buildDir}/jme/jME3_${jmeRev}.zip")
def jmeZipUrl = "http://updates.jmonkeyengine.org/stable/3.0/engine/jME3_${jmeRev}.zip"


task downloadJme << {
  jmeZipFile.parentFile.mkdirs()
  if (!jmeZipFile.exists()) {
    download {
      src jmeZipUrl
      dest jmeZipFile
    }
  }
}

task unzipJme(type: Copy) {
  from zipTree(jmeZipFile)
  into jmeDir
}

def pomConfig = {
  //name 'jMonkeyEngine'
  //description 'A complete 3D game development suite written purely in Java.'
  url 'http://jmonkeyengine.org'
  inceptionYear '2014'

  scm {
    url 'https://github.com/jMonkeyEngine/jmonkeyengine'
    connection 'scm:https://github.com/jMonkeyEngine/jmonkeyengine.git'
    developerConnection 'scm:git@github.com:jMonkeyEngine/jmonkeyengine.git'
  }

  licenses {
    license {
      name 'New BSD (3-clause) License'
      url 'http://hub.jmonkeyengine.org/wiki/doku.php/bsd_license'
      distribution 'repo'
    }
  }

  // from http://hub.jmonkeyengine.org/introduction/team/
  developers {
    developer {
      name 'Kirill Vainer'
      id 'Momoko_Fan'
    }
    developer {
      name 'Erlend Sogge Heggen'
      id 'erlend_sh'
    }
    developer {
      name 'Skye Book'
      id 'sbook'
    }
    developer {
      name 'Normen Hansen'
      id 'normen'
    }
    developer {
      name 'Ruth Kusterer'
      id 'zathras'
    }
    developer {
      name 'RÃ©my Bouquet'
      id 'nehon'
    }
    developer {
      name 'Paul Speed'
      id 'pspeed'
    }
    developer {
      name 'Brent Owens'
      id 'Sploreg'
    }
    developer {
      name 'Eric Potter'
      id 'iwgeric'
    }
  }
}

subprojects {
  apply plugin: 'java' //required to run maven
  apply plugin: "maven-publish"

  repositories {
    mavenCentral()
  }

  group = "com.jme3"
  version = jmeVersion

  jar.doLast {
    def jmeLibName = project.name.replace('jme3', 'jME3')
    def srcFile = file("${jmeLibsDir}/${jmeLibName}.jar")
    def destFile = file("${libsDir}/${project.name}-${project.version}.jar")
    destFile.parentFile.mkdirs()
    //print "copy from $srcFile to ${destFile}"
    copy {
      from srcFile
      into libsDir
      rename { String fileName ->
        //fileName.replace("input", "output")
        "${project.name}-${project.version}.jar"
      }
    }
  }
}

configure(subprojects.findAll {it.name == 'jme3-core'}) {
  task javadocJar(type: Jar) {
	  from "${jmeDir}/javadoc"
	  classifier = 'javadoc'
    exclude "Common", "jme3test"
  }

  task sourcesJar(type: Jar) {
	  from "${jmeDir}/source"
	  classifier = 'sources'
    exclude "Common", "jme3test"
  }

  publishing {
    publications {
      maven(MavenPublication) {
        from components.java
        artifact sourcesJar
        artifact javadocJar
        pom.withXml {
          asNode().children().last() + pomConfig
        }
      }
    }
  }
}

configure(subprojects.findAll {it.name != 'jme3-core'}) {
  publishing {
    publications {
      maven(MavenPublication) {
        from components.java
        pom.withXml {
          asNode().children().last() + pomConfig
        }
      }
    }
  }
}

subprojects {
  apply plugin: 'com.jfrog.bintray'
  bintray {
    user = bintray_user
    key = bintray_api_key

    publications = ['maven'] //When uploading Maven-based publication files
    dryRun = false //Whether to run this as dry-run, without deploying
    publish = true //If version should be auto published after an upload
    pkg {
      repo = 'jme3stuff'
      name = project.name
      desc = "A complete 3D game development suite written purely in Java : module ${project.name}."
      websiteUrl = "http://jmonkeyengine.org"
      issueTrackerUrl = "https://github.com/jMonkeyEngine/jmonkeyengine/issues"
      vcsUrl = "https://github.com/jMonkeyEngine/jmonkeyengine.git"
      licenses = ['BSD 3-Clause']
      labels = ['jmonkeyengine']
      publicDownloadNumbers = true
      version {
        //name = project.version
        //vcsTag = project.version
        //attributes = [] //Optional version-level attributes
        //gpg {
        //	sign = true //Determines whether to GPG sign the files. The default is false
        //	passphrase = 'optional, the passphrase for GPG signing'
        //}
      }
    }
  }
}
